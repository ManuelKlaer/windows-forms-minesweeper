<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutViewOnGithub" xml:space="preserve">
    <value>View this project on GitHub</value>
  </data>
  <data name="AppConfirmButton" xml:space="preserve">
    <value>✓</value>
  </data>
  <data name="AppConfirmExitText" xml:space="preserve">
    <value>A game is currently running. Do you really want to exit?</value>
  </data>
  <data name="AppConfirmExitTitle" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="AppConfirmNewGameText" xml:space="preserve">
    <value>A game is currently running. Do you really want to create a new board?</value>
  </data>
  <data name="AppConfirmNewGameTitle" xml:space="preserve">
    <value>Create a new board</value>
  </data>
  <data name="AppCopyright" xml:space="preserve">
    <value>© Manuel Klär
© Max Mitterböck</value>
  </data>
  <data name="AppEmoji" xml:space="preserve">
    <value>💣</value>
  </data>
  <data name="AppNextButton" xml:space="preserve">
    <value>&gt;</value>
  </data>
  <data name="AppPreviousButton" xml:space="preserve">
    <value>&lt;</value>
  </data>
  <data name="AppProgressText" xml:space="preserve">
    <value>{0} / {1}</value>
  </data>
  <data name="AppProgressTextEmoji" xml:space="preserve">
    <value>{0} {1} / {2}</value>
  </data>
  <data name="AppTextEmoji" xml:space="preserve">
    <value>{0} {1}</value>
  </data>
  <data name="AppTitle" xml:space="preserve">
    <value>Minesweeper</value>
  </data>
  <data name="AppTitleAbout" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AppTitleCustomGame" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="AppTitleEndResult" xml:space="preserve">
    <value>End result</value>
  </data>
  <data name="AppTitleSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="AppTitleStatistics" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="AppTitleTutorial" xml:space="preserve">
    <value>How to play?</value>
  </data>
  <data name="AppTitleWelcome" xml:space="preserve">
    <value>Welcome to {0}</value>
  </data>
  <data name="AppVersion" xml:space="preserve">
    <value>Version: {0}</value>
  </data>
  <data name="CustomHeight" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="CustomHints" xml:space="preserve">
    <value>Hints</value>
  </data>
  <data name="CustomMines" xml:space="preserve">
    <value>Mines</value>
  </data>
  <data name="CustomWidth" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="EmojiBoard" xml:space="preserve">
    <value>⊞</value>
  </data>
  <data name="EmojiBomb" xml:space="preserve">
    <value>💣</value>
  </data>
  <data name="EmojiClock" xml:space="preserve">
    <value>🕑</value>
  </data>
  <data name="EmojiFlag" xml:space="preserve">
    <value>⚑</value>
  </data>
  <data name="EmojiHappy" xml:space="preserve">
    <value>:)</value>
  </data>
  <data name="EmojiKeyboard" xml:space="preserve">
    <value>⌨</value>
  </data>
  <data name="EmojiLightBulb" xml:space="preserve">
    <value>💡</value>
  </data>
  <data name="EmojiPartyPopper" xml:space="preserve">
    <value>🎉</value>
  </data>
  <data name="EmojiPause" xml:space="preserve">
    <value>II</value>
  </data>
  <data name="EmojiPerformance" xml:space="preserve">
    <value>📈</value>
  </data>
  <data name="EmojiPlay" xml:space="preserve">
    <value>▷</value>
  </data>
  <data name="EmojiQuestion" xml:space="preserve">
    <value>?</value>
  </data>
  <data name="EmojiStop" xml:space="preserve">
    <value />
  </data>
  <data name="EmojiSwords" xml:space="preserve">
    <value>⚔</value>
  </data>
  <data name="GameLost" xml:space="preserve">
    <value>Defeat</value>
  </data>
  <data name="GameWon" xml:space="preserve">
    <value>Victory</value>
  </data>
  <data name="MenuAbout" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="MenuExit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="MenuGame" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="MenuHelp" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="MenuLoad" xml:space="preserve">
    <value>Load</value>
  </data>
  <data name="MenuNew" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="MenuSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="MenuSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="MenuStatistics" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="MenuTutorial" xml:space="preserve">
    <value>Tutorial</value>
  </data>
  <data name="OverlayGamePaused" xml:space="preserve">
    <value>Game paused</value>
  </data>
  <data name="OverlayGameStopped" xml:space="preserve">
    <value>Click to begin</value>
  </data>
  <data name="PresetBeginner" xml:space="preserve">
    <value>Beginner</value>
  </data>
  <data name="PresetCustom" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="PresetExpert" xml:space="preserve">
    <value>Expert</value>
  </data>
  <data name="PresetIntermediate" xml:space="preserve">
    <value>Intermediate</value>
  </data>
  <data name="PresetMini" xml:space="preserve">
    <value>Mini</value>
  </data>
  <data name="SettingsAccentColor" xml:space="preserve">
    <value>Accent color:</value>
  </data>
  <data name="SettingsBackgroundColor" xml:space="preserve">
    <value>Background color:</value>
  </data>
  <data name="SettingsButtonReset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="SettingsButtonShow" xml:space="preserve">
    <value>Show</value>
  </data>
  <data name="SettingsCategoryApp" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="SettingsCategoryGame" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="SettingsCategoryUI" xml:space="preserve">
    <value>UI</value>
  </data>
  <data name="SettingsDefaultPreset" xml:space="preserve">
    <value>Default preset:</value>
  </data>
  <data name="SettingsLanguage" xml:space="preserve">
    <value>Language:</value>
  </data>
  <data name="SettingsResetSettings" xml:space="preserve">
    <value>Reset settings:</value>
  </data>
  <data name="SettingsResetStatistics" xml:space="preserve">
    <value>Reset statistics:</value>
  </data>
  <data name="SettingsShowWelcomeDialog" xml:space="preserve">
    <value>Show welcome dialog:</value>
  </data>
  <data name="SettingsTooltipColorChooser" xml:space="preserve">
    <value>Double-click to open a color chooser</value>
  </data>
  <data name="StatisticsCategoryAverageTime" xml:space="preserve">
    <value>{0} Average Time: {1}</value>
  </data>
  <data name="StatisticsCategoryGames" xml:space="preserve">
    <value>{0} Games: {1}</value>
  </data>
  <data name="StatisticsCategoryLost" xml:space="preserve">
    <value>{0} Defeats: {1}</value>
  </data>
  <data name="StatisticsCategoryMines" xml:space="preserve">
    <value>{0} Mines: {1}</value>
  </data>
  <data name="StatisticsCategoryPerformance" xml:space="preserve">
    <value>{0} Performance: {1}%</value>
  </data>
  <data name="StatisticsCategoryShortestTime" xml:space="preserve">
    <value>{0} Shortest Time: {1}</value>
  </data>
  <data name="StatisticsCategoryTotalTime" xml:space="preserve">
    <value>{0} Total Time: {1}</value>
  </data>
  <data name="StatisticsCategoryWon" xml:space="preserve">
    <value>{0} Victories: {1}</value>
  </data>
  <data name="StatisticsPageGeneral" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="TutorialPage10Description" xml:space="preserve">
    <value>The player can use hints to reveal a random square that contains a mine. This can be helpful in situations where the player is unsure about which squares to reveal next. Hints are limited and should be used sparingly.</value>
  </data>
  <data name="TutorialPage10Title" xml:space="preserve">
    <value>Hints</value>
  </data>
  <data name="TutorialPage11Description" xml:space="preserve">
    <value>The player can pause the game at any time by clicking the pause button. This will stop the timer and prevent the player from accidentally revealing or flagging squares. The player can resume the game by clicking the resume button.</value>
  </data>
  <data name="TutorialPage11Title" xml:space="preserve">
    <value>Pause and Resume</value>
  </data>
  <data name="TutorialPage12Description" xml:space="preserve">
    <value>Congratulations! You are now ready to play Minesweeper. Remember to use your hints wisely and keep an eye on the flag counter to avoid detonating any mines.</value>
  </data>
  <data name="TutorialPage12Title" xml:space="preserve">
    <value>Good Luck!</value>
  </data>
  <data name="TutorialPage1Description" xml:space="preserve">
    <value>Minesweeper is a single-player puzzle game where the objective is to clear a rectangular board containing hidden mines without detonating any of them. Players use logic to uncover safe squares and mark potential mine locations until the entire board is cleared, revealing the location of all the mines.</value>
  </data>
  <data name="TutorialPage1Title" xml:space="preserve">
    <value>Minesweeper</value>
  </data>
  <data name="TutorialPage2Description" xml:space="preserve">
    <value>Left-click: Use this to reveal a square. If the square contains a mine, the game is over. If it is a blank square, it will reveal all adjacent blank squares until a number is reached. If it is a numbered square, it will reveal only that square.</value>
  </data>
  <data name="TutorialPage2Title" xml:space="preserve">
    <value>Controls: Left click</value>
  </data>
  <data name="TutorialPage3Description" xml:space="preserve">
    <value>Middle-click: Use this to mark a square with a question mark. This is useful if you are unsure if the square contains a mine.</value>
  </data>
  <data name="TutorialPage3Title" xml:space="preserve">
    <value>Controls: Middle click</value>
  </data>
  <data name="TutorialPage4Description" xml:space="preserve">
    <value>Right-click: Use this to flag a square. This indicates that the square contains a mine. Use the flag counter to keep track of how many mines are remaining on the board.</value>
  </data>
  <data name="TutorialPage4Title" xml:space="preserve">
    <value>Controls: Right click</value>
  </data>
  <data name="TutorialPage5Description" xml:space="preserve">
    <value>The game board is made up of a grid of squares. Some of these squares contain hidden mines. The player's objective is to reveal all non-mine squares without detonating any mines. The number of mines is predetermined and increases with the size of the board.</value>
  </data>
  <data name="TutorialPage5Title" xml:space="preserve">
    <value>Game Mechanics 1/3</value>
  </data>
  <data name="TutorialPage6Description" xml:space="preserve">
    <value>When a square is revealed, it will either be blank or contain a number. The numbers represent the number of mines in the eight surrounding squares. For example, if a square has the number "3" on it, it means that there are three mines in the eight squares surrounding that square.</value>
  </data>
  <data name="TutorialPage6Title" xml:space="preserve">
    <value>Game Mechanics 2/3</value>
  </data>
  <data name="TutorialPage7Description" xml:space="preserve">
    <value>Remember to use the numbers on the squares to make educated guesses and avoid detonating any mines!</value>
  </data>
  <data name="TutorialPage7Title" xml:space="preserve">
    <value>Game Mechanics 3/3</value>
  </data>
  <data name="TutorialPage8Description" xml:space="preserve">
    <value>The game is timed, and the timer begins counting as soon as the player clicks on their first square. The player's time is displayed on the game board, and the player's objective is to complete the game in the shortest amount of time possible.</value>
  </data>
  <data name="TutorialPage8Title" xml:space="preserve">
    <value>Timer</value>
  </data>
  <data name="TutorialPage9Description" xml:space="preserve">
    <value>The player can flag squares that they believe contain mines. A counter keeps track of how many flags the player has set, and how many mines remain on the board. The player can use this information to make educated guesses and avoid detonating mines.</value>
  </data>
  <data name="TutorialPage9Title" xml:space="preserve">
    <value>Flag Counter</value>
  </data>
  <data name="WelcomeChosenLanguage" xml:space="preserve">
    <value>Automatically chosen language: {0}</value>
  </data>
  <data name="WelcomeStartPlayingText" xml:space="preserve">
    <value>Start playing</value>
  </data>
  <data name="WelcomeText" xml:space="preserve">
    <value>Welcome</value>
  </data>
  <data name="WelcomeTutorialText" xml:space="preserve">
    <value>Tutorial</value>
  </data>
</root>